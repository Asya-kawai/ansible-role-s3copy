---
- name: Update OS package caches for Debian
  apt:
    update_cache: yes
  when: ansible_facts['os_family'] == 'Debian'
  tags:
    - s3copy
    - s3copy-update-os-package-caches
    - webserver

- name: Update OS package caches for CentOS
  dnf:
    update_cache: yes
  when: ansible_facts['os_family'] == 'RedHat'
  tags:
    - s3copy
    - s3copy-update-os-package-caches
    - webserver

- name: Update OS packages
  package:
    name: '*'
    state: latest
  tags:
    - s3copy
    - s3copy-update-os-packages
    - webserver

- name: Install OS packages
  package:
    name:
      - zip
      - unzip
    state: present
  tags:
    - s3copy
    - s3copy-install-os-packages
    - webserver

- name: Download AWS cli
  get_url:
    url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
    dest: /usr/local/src/awscli-exe-linux-x86_64.zip
  tags:
    - s3copy
    - s3copy-download-awscli
    - webserver

- name: Check AWS cli zip exists
  stat:
    path: /usr/local/src/awscli-exe-linux-x86_64.zip
  register: awscli_zip_path
  tags:
    - s3copy
    - s3copy-check-awscli-zip-exists
    - webserver

- name: Unarchive AWS cli
  unarchive:
    remote_src: yes
    src: /usr/local/src/awscli-exe-linux-x86_64.zip
    dest: /usr/local/src/
  when: awscli_zip_path.stat.exists
  tags:
    - s3copy
    - s3copy-unarchive-awscli
    - webserver

- name: Check AWS cli exists
  stat:
    path: "{{ awscli_install_path }}"
  register: awscli_path
  tags:
    - s3copy
    - s3copy-check-awscli-exists
    - webserver

- name: Install AWS cli
  command:
    chdir: /usr/local/src/
    cmd: ./aws/install
  when:
    - not awscli_path.stat.exists
  changed_when: false
  tags:
    - s3copy
    - s3copy-install-awscli
    - webserver

- name: Update AWS cli
  command:
    chdir: /usr/local/src/
    cmd: ./aws/install --update
  when:
    - awscli_path.stat.exists
  changed_when: false
  tags:
    - s3copy
    - s3copy-update-awscli
    - webserver

- name: Create and setup AWS credentials
  include: aws_credentials.yml
  with_items: "{{ aws.credentials }}"
  loop_control:
    loop_var: credential
  tags:
    - s3copy
    - s3copy-create-aws-credentials
    - webserver

- name: Create s3copy services
  template:
    src: "{{ item.lstrip('/') }}.j2"
    dest: "{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ s3copy_service_path }}"
    - "{{ s3copy_timer_path }}"
  tags:
    - s3copy
    - s3copy-create-s3copy-services
    - webserver

- name: Check s3copy service exists
  stat:
    path: "{{ s3copy_service_path }}"
  register: s3copy_service_path_result
  tags:
    - s3copy
    - s3copy-check-s3copy-service
    - webserver

- name: Enable s3copy service
  systemd:
    name: "{{ s3copy_service_name }}"
    enabled: true
    daemon-reload: true
  when: s3copy_service_path_result.stat.exists
  tags:
    - s3copy
    - s3copy-enable-s3copy-services
    - webserver

- name: Check s3copy timer exists
  stat:
    path: "{{ s3copy_timer_path }}"
  register: s3copy_timer_path_result
  tags:
    - s3copy
    - s3copy-check-s3copy-timer
    - webserver

- name: Enable s3copy timer
  systemd:
    name: "{{ s3copy_timer_name }}"
    state: started
    enabled: true
    daemon-reload: true
  when: s3copy_timer_path_result.stat.exists
  tags:
    - s3copy
    - s3copy-enable-s3copy-services
    - webserver
